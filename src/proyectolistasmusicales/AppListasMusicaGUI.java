/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyectolistasmusicales;

import java.awt.Color;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.TabableView;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author Joaquín
 */
public class AppListasMusicaGUI extends javax.swing.JFrame {

    /**
     * Creates new form AppListasMusicaGUI
     */
    public AppListasMusicaGUI() {
        initComponents();
        
        //Color JFrame
        this.getContentPane().setBackground(Color.blue);
        
        jscpContenedorTablaCargarLista.setVisible(false); 
        jtfTextoNuevoValor.setVisible(false);
        
        //eventos al pulsar modificar tabla cambiaran a true
        jlExplicaModificar.setVisible(false);
        jtfTextoNuevoValor.setVisible(false);
        jbModificarCampos.setVisible(false);
        
        //eventos que se mostraran al guardar con nombre la lista
        jtfNombreArchivoLista.setVisible(false);
        jlIntroduceNombre.setVisible(false);
        jbGuardarListaNombre.setVisible(false);

        
        
           }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jdCrearListaVentana = new javax.swing.JDialog();
        jbBuscarCancion = new javax.swing.JButton();
        jlNombreCancion = new javax.swing.JLabel();
        jspContenedorTablaCrearLista = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jbGuardarListaM3U = new javax.swing.JButton();
        jbGuardarListaPLS = new javax.swing.JButton();
        jbGuardarListaXSPF = new javax.swing.JButton();
        jtfNombreArchivoLista = new javax.swing.JTextField();
        jlIntroduceNombre = new javax.swing.JLabel();
        jbGuardarListaNombre = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jmiAbrirListaCarpeta = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jmiSalirVentanaCrearLista = new javax.swing.JMenuItem();
        jdCargarListaCanciones = new javax.swing.JDialog();
        jbAbrirFicheroLista = new javax.swing.JButton();
        jscpContenedorTablaCargarLista = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jbAñadirCancion = new javax.swing.JButton();
        jbBorrarCancion = new javax.swing.JButton();
        jbModificarCampos = new javax.swing.JButton();
        jtfTextoNuevoValor = new javax.swing.JTextField();
        jbGuardarPanelCargar = new javax.swing.JButton();
        jlExplicaModificar = new javax.swing.JLabel();
        jbModificarTabla = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jmiSalirVentanaCargar = new javax.swing.JMenuItem();
        jdEliminarListas = new javax.swing.JDialog();
        jbBorrarLista = new javax.swing.JButton();
        jlExplicaBorrar = new javax.swing.JLabel();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jbCrearLista = new javax.swing.JButton();
        jbEliminarLista = new javax.swing.JButton();
        jbCargarLista = new javax.swing.JButton();
        jlLogo = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmiCargarLista = new javax.swing.JMenuItem();
        jmiCrearLista = new javax.swing.JMenuItem();
        jmiBorrarLista = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiSalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jmiAcerca = new javax.swing.JMenuItem();

        jdCrearListaVentana.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
                jdCrearListaVentanaAncestorMoved(evt);
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
            }
        });

        jbBuscarCancion.setBackground(new java.awt.Color(0, 51, 204));
        jbBuscarCancion.setFont(new java.awt.Font("Source Code Pro", 1, 12)); // NOI18N
        jbBuscarCancion.setForeground(new java.awt.Color(255, 255, 255));
        jbBuscarCancion.setText("Buscar canción en carpeta");
        jbBuscarCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarCancionActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jspContenedorTablaCrearLista.setViewportView(jTable1);

        jbGuardarListaM3U.setBackground(new java.awt.Color(0, 51, 204));
        jbGuardarListaM3U.setFont(new java.awt.Font("Source Code Pro", 3, 12)); // NOI18N
        jbGuardarListaM3U.setForeground(new java.awt.Color(255, 255, 255));
        jbGuardarListaM3U.setText("Guardar Lista Formato M3U");
        jbGuardarListaM3U.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarListaM3UActionPerformed(evt);
            }
        });

        jbGuardarListaPLS.setBackground(new java.awt.Color(0, 51, 204));
        jbGuardarListaPLS.setFont(new java.awt.Font("Source Code Pro", 3, 12)); // NOI18N
        jbGuardarListaPLS.setForeground(new java.awt.Color(255, 255, 255));
        jbGuardarListaPLS.setText("Guardar Lista Formato PLS");
        jbGuardarListaPLS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarListaPLSActionPerformed(evt);
            }
        });

        jbGuardarListaXSPF.setBackground(new java.awt.Color(0, 51, 204));
        jbGuardarListaXSPF.setFont(new java.awt.Font("Source Code Pro", 3, 12)); // NOI18N
        jbGuardarListaXSPF.setForeground(new java.awt.Color(255, 255, 255));
        jbGuardarListaXSPF.setText("Guardar Lista Formato XSPF");
        jbGuardarListaXSPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarListaXSPFActionPerformed(evt);
            }
        });

        jlIntroduceNombre.setForeground(new java.awt.Color(255, 255, 255));
        jlIntroduceNombre.setText("Introduce el nombre de la Lista:");

        jbGuardarListaNombre.setBackground(new java.awt.Color(0, 51, 204));
        jbGuardarListaNombre.setFont(new java.awt.Font("Microsoft YaHei UI Light", 1, 12)); // NOI18N
        jbGuardarListaNombre.setForeground(new java.awt.Color(255, 204, 51));
        jbGuardarListaNombre.setText("Guardar");
        jbGuardarListaNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarListaNombreActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/subir canciones.png"))); // NOI18N

        jMenu4.setText("Menu");

        jmiAbrirListaCarpeta.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiAbrirListaCarpeta.setText("Abrir Lista Musical");
        jmiAbrirListaCarpeta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAbrirListaCarpetaActionPerformed(evt);
            }
        });
        jMenu4.add(jmiAbrirListaCarpeta);
        jMenu4.add(jSeparator2);

        jmiSalirVentanaCrearLista.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiSalirVentanaCrearLista.setText("Salir Ventana Crear Lista");
        jmiSalirVentanaCrearLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalirVentanaCrearListaActionPerformed(evt);
            }
        });
        jMenu4.add(jmiSalirVentanaCrearLista);

        jMenuBar3.add(jMenu4);

        jdCrearListaVentana.setJMenuBar(jMenuBar3);

        javax.swing.GroupLayout jdCrearListaVentanaLayout = new javax.swing.GroupLayout(jdCrearListaVentana.getContentPane());
        jdCrearListaVentana.getContentPane().setLayout(jdCrearListaVentanaLayout);
        jdCrearListaVentanaLayout.setHorizontalGroup(
            jdCrearListaVentanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdCrearListaVentanaLayout.createSequentialGroup()
                .addGroup(jdCrearListaVentanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jspContenedorTablaCrearLista, javax.swing.GroupLayout.PREFERRED_SIZE, 637, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jdCrearListaVentanaLayout.createSequentialGroup()
                        .addComponent(jbGuardarListaM3U)
                        .addGap(22, 22, 22)
                        .addComponent(jbGuardarListaPLS)
                        .addGap(30, 30, 30)
                        .addComponent(jbGuardarListaXSPF))
                    .addGroup(jdCrearListaVentanaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jdCrearListaVentanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlNombreCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jdCrearListaVentanaLayout.createSequentialGroup()
                                .addComponent(jlIntroduceNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtfNombreArchivoLista, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)
                                .addComponent(jbGuardarListaNombre))))
                    .addGroup(jdCrearListaVentanaLayout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addComponent(jbBuscarCancion, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel2)))
                .addContainerGap(242, Short.MAX_VALUE))
        );
        jdCrearListaVentanaLayout.setVerticalGroup(
            jdCrearListaVentanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdCrearListaVentanaLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jspContenedorTablaCrearLista, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(jdCrearListaVentanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbBuscarCancion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40)
                .addGroup(jdCrearListaVentanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbGuardarListaM3U)
                    .addComponent(jbGuardarListaPLS)
                    .addComponent(jbGuardarListaXSPF))
                .addGap(30, 30, 30)
                .addGroup(jdCrearListaVentanaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlIntroduceNombre)
                    .addComponent(jtfNombreArchivoLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbGuardarListaNombre))
                .addGap(54, 54, 54)
                .addComponent(jlNombreCancion)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jdCargarListaCanciones.setBackground(new java.awt.Color(204, 204, 255));

        jbAbrirFicheroLista.setBackground(new java.awt.Color(0, 51, 204));
        jbAbrirFicheroLista.setFont(new java.awt.Font("Source Code Pro", 3, 12)); // NOI18N
        jbAbrirFicheroLista.setForeground(new java.awt.Color(255, 255, 255));
        jbAbrirFicheroLista.setText("Abrir Fichero Lista Reproducción");
        jbAbrirFicheroLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAbrirFicheroListaActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jscpContenedorTablaCargarLista.setViewportView(jTable2);

        jbAñadirCancion.setBackground(new java.awt.Color(0, 51, 204));
        jbAñadirCancion.setFont(new java.awt.Font("Source Code Pro", 3, 12)); // NOI18N
        jbAñadirCancion.setForeground(new java.awt.Color(255, 255, 255));
        jbAñadirCancion.setText("Añadir Canción ");
        jbAñadirCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAñadirCancionActionPerformed(evt);
            }
        });

        jbBorrarCancion.setBackground(new java.awt.Color(0, 51, 204));
        jbBorrarCancion.setFont(new java.awt.Font("Source Code Pro", 3, 12)); // NOI18N
        jbBorrarCancion.setForeground(new java.awt.Color(255, 255, 255));
        jbBorrarCancion.setText("Borrar Canción");
        jbBorrarCancion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarCancionActionPerformed(evt);
            }
        });

        jbModificarCampos.setBackground(new java.awt.Color(0, 51, 204));
        jbModificarCampos.setFont(new java.awt.Font("Microsoft YaHei UI Light", 1, 12)); // NOI18N
        jbModificarCampos.setForeground(new java.awt.Color(204, 255, 255));
        jbModificarCampos.setText("Introducir Valor");
        jbModificarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModificarCamposActionPerformed(evt);
            }
        });

        jtfTextoNuevoValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfTextoNuevoValorActionPerformed(evt);
            }
        });

        jbGuardarPanelCargar.setBackground(new java.awt.Color(0, 51, 204));
        jbGuardarPanelCargar.setFont(new java.awt.Font("Microsoft YaHei UI Light", 1, 12)); // NOI18N
        jbGuardarPanelCargar.setForeground(new java.awt.Color(255, 204, 0));
        jbGuardarPanelCargar.setText("Guardar Cambios");
        jbGuardarPanelCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarPanelCargarActionPerformed(evt);
            }
        });

        jlExplicaModificar.setForeground(new java.awt.Color(255, 255, 255));
        jlExplicaModificar.setText("Selecciona el campo de la tabla a modificar, introdue un valor y pulsa \"Introducir Valor\"");

        jbModificarTabla.setBackground(new java.awt.Color(0, 51, 204));
        jbModificarTabla.setFont(new java.awt.Font("Source Code Pro", 3, 12)); // NOI18N
        jbModificarTabla.setForeground(new java.awt.Color(255, 255, 255));
        jbModificarTabla.setText("Modificar Lista ");
        jbModificarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModificarTablaActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono app.png"))); // NOI18N

        jMenu3.setText("Menu");

        jmiSalirVentanaCargar.setText("Salir ventana cargar");
        jmiSalirVentanaCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalirVentanaCargarActionPerformed(evt);
            }
        });
        jMenu3.add(jmiSalirVentanaCargar);

        jMenuBar2.add(jMenu3);

        jdCargarListaCanciones.setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout jdCargarListaCancionesLayout = new javax.swing.GroupLayout(jdCargarListaCanciones.getContentPane());
        jdCargarListaCanciones.getContentPane().setLayout(jdCargarListaCancionesLayout);
        jdCargarListaCancionesLayout.setHorizontalGroup(
            jdCargarListaCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdCargarListaCancionesLayout.createSequentialGroup()
                .addGroup(jdCargarListaCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jdCargarListaCancionesLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jlExplicaModificar, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE))
                    .addGroup(jdCargarListaCancionesLayout.createSequentialGroup()
                        .addGroup(jdCargarListaCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jdCargarListaCancionesLayout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addComponent(jbAbrirFicheroLista, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jdCargarListaCancionesLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jbAñadirCancion)
                                .addGap(18, 18, 18)
                                .addComponent(jbBorrarCancion)
                                .addGap(33, 33, 33)
                                .addComponent(jbModificarTabla))
                            .addGroup(jdCargarListaCancionesLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(jdCargarListaCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jdCargarListaCancionesLayout.createSequentialGroup()
                                        .addComponent(jtfTextoNuevoValor, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(32, 32, 32)
                                        .addComponent(jbModificarCampos)
                                        .addGap(26, 26, 26)
                                        .addComponent(jbGuardarPanelCargar))
                                    .addComponent(jscpContenedorTablaCargarLista, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jdCargarListaCancionesLayout.setVerticalGroup(
            jdCargarListaCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdCargarListaCancionesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jdCargarListaCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbAbrirFicheroLista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jdCargarListaCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAñadirCancion)
                    .addComponent(jbBorrarCancion)
                    .addComponent(jbModificarTabla))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlExplicaModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jdCargarListaCancionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbModificarCampos)
                    .addComponent(jtfTextoNuevoValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbGuardarPanelCargar))
                .addGap(24, 24, 24)
                .addComponent(jscpContenedorTablaCargarLista, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77))
        );

        jbBorrarLista.setBackground(new java.awt.Color(0, 51, 204));
        jbBorrarLista.setFont(new java.awt.Font("MS UI Gothic", 1, 18)); // NOI18N
        jbBorrarLista.setForeground(new java.awt.Color(255, 153, 51));
        jbBorrarLista.setText("Borrar Lista");
        jbBorrarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarListaActionPerformed(evt);
            }
        });

        jlExplicaBorrar.setBackground(new java.awt.Color(0, 51, 204));
        jlExplicaBorrar.setFont(new java.awt.Font("Source Code Pro", 3, 12)); // NOI18N
        jlExplicaBorrar.setForeground(new java.awt.Color(255, 255, 255));
        jlExplicaBorrar.setText("Pulsa \"Borrar Lista\" y accede a tu carpeta. Selecciona la lista a eliminar");

        javax.swing.GroupLayout jdEliminarListasLayout = new javax.swing.GroupLayout(jdEliminarListas.getContentPane());
        jdEliminarListas.getContentPane().setLayout(jdEliminarListasLayout);
        jdEliminarListasLayout.setHorizontalGroup(
            jdEliminarListasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jdEliminarListasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlExplicaBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jdEliminarListasLayout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addComponent(jbBorrarLista, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jdEliminarListasLayout.setVerticalGroup(
            jdEliminarListasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jdEliminarListasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlExplicaBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jbBorrarLista)
                .addGap(53, 53, 53))
        );

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbCrearLista.setBackground(new java.awt.Color(0, 51, 204));
        jbCrearLista.setFont(new java.awt.Font("Source Code Pro", 3, 12)); // NOI18N
        jbCrearLista.setForeground(new java.awt.Color(255, 255, 255));
        jbCrearLista.setText("Crear Lista de Reproducción");
        jbCrearLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCrearListaActionPerformed(evt);
            }
        });

        jbEliminarLista.setBackground(new java.awt.Color(0, 51, 204));
        jbEliminarLista.setFont(new java.awt.Font("Source Code Pro", 3, 12)); // NOI18N
        jbEliminarLista.setForeground(new java.awt.Color(255, 255, 255));
        jbEliminarLista.setText("Eliminar Lista de Reproducción");
        jbEliminarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarListaActionPerformed(evt);
            }
        });

        jbCargarLista.setBackground(new java.awt.Color(0, 51, 204));
        jbCargarLista.setFont(new java.awt.Font("Source Code Pro", 3, 12)); // NOI18N
        jbCargarLista.setForeground(new java.awt.Color(255, 255, 255));
        jbCargarLista.setText("Cargar Lista Reproducción");
        jbCargarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCargarListaActionPerformed(evt);
            }
        });

        jlLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Listas musicales.png"))); // NOI18N

        jMenu1.setText("Menu");

        jmiCargarLista.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiCargarLista.setText("Cargar Lista");
        jmiCargarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCargarListaActionPerformed(evt);
            }
        });
        jMenu1.add(jmiCargarLista);

        jmiCrearLista.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiCrearLista.setText("Crear Lista");
        jmiCrearLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCrearListaActionPerformed(evt);
            }
        });
        jMenu1.add(jmiCrearLista);

        jmiBorrarLista.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiBorrarLista.setText("Borrar Lista");
        jmiBorrarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiBorrarListaActionPerformed(evt);
            }
        });
        jMenu1.add(jmiBorrarLista);
        jMenu1.add(jSeparator1);

        jmiSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiSalir.setText("Salir");
        jmiSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalirActionPerformed(evt);
            }
        });
        jMenu1.add(jmiSalir);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");

        jmiAcerca.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jmiAcerca.setText("Acerca de");
        jmiAcerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAcercaActionPerformed(evt);
            }
        });
        jMenu2.add(jmiAcerca);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jlLogo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbCrearLista, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbCargarLista, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbEliminarLista))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jbCrearLista)
                        .addGap(18, 18, 18)
                        .addComponent(jbCargarLista)
                        .addGap(18, 18, 18)
                        .addComponent(jbEliminarLista))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jlLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(75, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbBuscarCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarCancionActionPerformed
       
        
        Cancion c = buscarAñadirCancion(); 

        tabla.añadirCancion(c);

        jTable1.setModel(tabla);

        //se muestra la tabla
        jspContenedorTablaCrearLista.setVisible(true);
        
        jTable1.updateUI();
        
        jbBuscarCancion.updateUI();
      
          
    }//GEN-LAST:event_jbBuscarCancionActionPerformed
    
    //función para buscar y añadri cancion desde pc
    private Cancion buscarAñadirCancion() {
        //abrios archivo y guardamos nombre y ruta
        JFileChooser dialogoAbrirFichero = new JFileChooser();

        int seleccion = dialogoAbrirFichero.showOpenDialog(this);

        String nombreCancion = "";
        String ruta = "";

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = dialogoAbrirFichero.getSelectedFile();
            jlNombreCancion.setText(archivo.getName());

            nombreCancion = jlNombreCancion.getText();

            ruta = dialogoAbrirFichero.getSelectedFile().getPath();

        }

        int duracion = (int) (Math.random() * 300 + 100);

        Cancion c1 = new Cancion(nombreCancion, ruta, duracion);

        return c1;

    }
    
    //función que devuelve el nombre del fichero, ubicación de la lista de Canciones dentro de carpeta proyecto
     private String rutaListaCanciones() {
         
        //abrios archivo y guardamos nombre y ruta
        JFileChooser dialogoAbrirFichero = new JFileChooser();

        int seleccion = dialogoAbrirFichero.showOpenDialog(this);

        String rutaLista = "";

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = dialogoAbrirFichero.getSelectedFile();
            jlNombreCancion.setText(archivo.getName());

            rutaLista = jlNombreCancion.getText();

        }
          
        return rutaLista;

    }
    
    
    
    

    private void jbCrearListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCrearListaActionPerformed
       
        //cambia el color del fondo fel jdialog
        jdCrearListaVentana.getContentPane().setBackground(new Color(0,51,204));
        
        //al pulsar en crear lista se cre un nuevo objeto 
        tabla = new MiTablaCanciones();
        
         //abro jDialog Crear Lista
        jdCrearListaVentana.setVisible(true);
        jdCrearListaVentana.pack();
        
        //el nombre de la canción no es visible
        jlNombreCancion.setVisible(false);
        
        jspContenedorTablaCrearLista.setVisible(false);
        
                
    }//GEN-LAST:event_jbCrearListaActionPerformed

    private void jdCrearListaVentanaAncestorMoved(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jdCrearListaVentanaAncestorMoved
        
     
    }//GEN-LAST:event_jdCrearListaVentanaAncestorMoved

    //función para guardar canciones en formato M3U
    private static void guardarListaM3U(MiTablaCanciones t, String nombreArchivo) {

        if (!nombreArchivo.endsWith(".m3u")) {

            nombreArchivo = nombreArchivo + ".m3u";
        }

        BufferedWriter out = null;

        try {
            out = new BufferedWriter(new FileWriter(nombreArchivo));

            out.write("#EXTM3U");//la primera linea del fichero
            out.newLine();
            
             int cont = 0;//creo e inicio contador para índice de filas de tabla

            for (int i = 0; i < t.getRowCount(); i++) {
               
                out.write("#EXTINF: ");//
                out.write(t.getValueAt(cont, 2).toString() + ",");
                out.write(t.getValueAt(cont, 0).toString());
                out.newLine();
                out.write(t.getValueAt(cont, 1).toString());
                out.newLine();
                cont++;
            }

        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        } finally {
            try {

                if (out != null) {
                    out.close();//se vacía el búfer y se escribe el archivo
                }

            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }

        }
    }
    
     //función para cargar lista de canciones formato M3U
    private static MiTablaCanciones cargarListaM3U(String ubicacion) {

        MiTablaCanciones t = new MiTablaCanciones();
        Cancion c;

        BufferedReader in = null; //clase de flujo para leer lineas

        try {//hago un try catch para capturar posibles excepciones al leer 

            in = new BufferedReader(new FileReader(ubicacion));//asocia un búfer en memoria y ya se puede leer grupos 

            String linea = in.readLine();//inicializo con la primera linea, para saltarla. 

            int duracion2 = 0;

            while (linea != null) {//mientras no llegue al final del archivo 

                String titulo = in.readLine();
                String ruta = in.readLine();

                if (ruta != null && titulo != null) {

                    String duracion = titulo.substring(9, 12);
                    titulo = titulo.substring(13);

                    //convierto duración a int
                    duracion2 = Integer.valueOf(duracion);
                }

                if (ruta != null && titulo != null) {

                    //creo el objeto Cancion y lo añado al arraylist
                    c = new Cancion(titulo, ruta, duracion2);
                    t.añadirCancion(c);
                }

                linea = ruta;
            }

        } catch (IOException ex) {//lanza una excepción del tipo input output
            System.out.println(ex.getMessage());
        } finally {//cerrar el archivo
            if (in != null) {
                try {
                    in.close();//cierra el flujo de entrada y completa la lectura y libera el archivo
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
        return t;
    }
    
        //función para guardar lista en formato PLS
    private static void guardarListaPLS(MiTablaCanciones t, String nombreArchivo) {
        
        if (!nombreArchivo.endsWith(".pls")) {

            nombreArchivo = nombreArchivo + ".pls";
        }

        BufferedWriter out = null;

        try {
            out = new BufferedWriter(new FileWriter(nombreArchivo));

            out.write("[playlist]");//la primera linea del fichero
            out.newLine();
            
             int cont = 0;//creo e inicio contador para índice de filas de tabla

            for (int i = 0; i < t.getRowCount(); i++) {
               
                out.write("File"+(cont+1)+"=");//
                out.write(t.getValueAt(cont, 1).toString());
                out.newLine();
                out.write("Title"+(cont+1)+"=");
                out.write(t.getValueAt(cont, 0).toString());
                out.newLine();
                out.write("Length"+(cont+1)+"=");
                out.write(t.getValueAt(cont, 2).toString());
                out.newLine();
                cont++;
            }
           
             out.write("NumberOfEntries="+(cont+1));
             out.newLine();
             out.write("Version=2");
    

        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        } finally {
            try {

                if (out != null) {
                    out.close();//se vacía el búfer y se escribe el archivo
                }

            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }

        }
    }
    
      //función para cargar lista de canciones formato PLS
    private static MiTablaCanciones cargarListaPLS(String ubicacion) {

        MiTablaCanciones t = new MiTablaCanciones();
        Cancion c;

        BufferedReader in = null; //clase de flujo para leer lineas

        try {//hago un try catch para capturar posibles excepciones al leer 

            in = new BufferedReader(new FileReader(ubicacion));//asocia un búfer en memoria y ya se puede leer grupos 

            String linea = in.readLine();//inicializo con la primera linea, para saltarla. 

            int duracion2 = 0;

            while (linea != null) {//mientras no llegue al final del archivo 

                String ruta = in.readLine();
                String titulo = in.readLine();
                String duracion = in.readLine();

                if (ruta != null && titulo != null && duracion != null) {

                    duracion = duracion.substring(8);
                    titulo = titulo.substring(7);
                    ruta = ruta.substring(7);

                    //convierto duración a int
                    duracion2 = Integer.valueOf(duracion);
                }

                if (ruta != null && titulo != null && !titulo.equals("Version=2")) {

                    //creo el objeto Cancion y lo añado al arraylist
                    c = new Cancion(titulo, ruta, duracion2);
                    t.añadirCancion(c);
                }

                linea = ruta;
            }

        } catch (IOException ex) {//lanza una excepción del tipo input output
            System.out.println(ex.getMessage());
        } finally {//cerrar el archivo
            if (in != null) {
                try {
                    in.close();//cierra el flujo de entrada y completa la lectura y libera el archivo
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        }
        return t;
    }
    
       //función para guardar canciones en un documento XSPF
    private static void guardarListaXSPF(MiTablaCanciones t, String xml) {
        
        
        if (!xml.endsWith(".xml")) {

            xml = xml + ".xml";
        }    

        ArrayList<Cancion> listaMusica = t.darListaCanciones();

        try {
            //Creamos una nueva instancia de una fábrica de constructores
            //de documentos.
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            //A partir de la instancia anterior, fabricamos un constructor de
            //documentos, que procesará el XML.
            DocumentBuilder docBuilder = dbf.newDocumentBuilder();

            //Elemento raíz
            Document doc = docBuilder.newDocument();
            Element raiz = doc.createElement("playlist");
            doc.appendChild(raiz);

            //Se agrega un atributo al nodo elemento playlist y su valor
            Attr atributo = doc.createAttribute("version");
            atributo.setValue("1");
            raiz.setAttributeNode(atributo);

            //recorrer objetos MiTablaCanciones y acceder al título
            for (int i = 0; i < t.getRowCount(); i++) {

                //elemeto cancion
                Element cancion = doc.createElement("cancion" + (i+1));
                raiz.appendChild(cancion);

                //elemento título
                Element titulo = doc.createElement("titulo");
                titulo.setTextContent(listaMusica.get(i).getTitulo());
                cancion.appendChild(titulo);

                //elemento ruta
                Element ruta = doc.createElement("ruta");
                ruta.setTextContent(listaMusica.get(i).getRuta());
                cancion.appendChild(ruta);

                //elemento duración
                Element duracion = doc.createElement("duracion");
                String duracionString = String.valueOf(listaMusica.get(i).getDuracion());
                duracion.setTextContent(duracionString);
                cancion.appendChild(duracion);

            }

            //Se escribe el contenido del XML en un archivo
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();

            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");

            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File(xml));
            transformer.transform(source, result);

        } catch (ParserConfigurationException ex) {
            Logger.getLogger(AppListasMusicaGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerConfigurationException ex) {
            Logger.getLogger(AppListasMusicaGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (TransformerException ex) {
            Logger.getLogger(AppListasMusicaGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
        
    //función para cargar canciones desde un documento XSPF
    private static MiTablaCanciones cargarListaXSPF(String ubicacion) {

        MiTablaCanciones t = new MiTablaCanciones();
        Cancion c;

        try {
            //Cargamos un fichero XML a DOM
            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            DocumentBuilder db = dbf.newDocumentBuilder();
            Document documento = db.parse(ubicacion);

            //Manipulación de documento XML
            NodeList listaNodos = documento.getDocumentElement().getChildNodes();

            //recorro la lista de nodos hijo
            for (int i = 0; i < listaNodos.getLength(); i++) {

                Node node = listaNodos.item(i);

                if (node.getNodeType() == Node.ELEMENT_NODE) {

                    //busco los elementos que coincidan con el nombre de etiquetas que crearan el objeto canción 
                    Element elemento = (Element) node;

                    //título
                    String titulo = elemento.getElementsByTagName("titulo")
                            .item(0).getChildNodes().item(0).getNodeValue();

                    //ruta
                    String ruta = elemento.getElementsByTagName("ruta").item(0)
                            .getChildNodes().item(0).getNodeValue();

                    //duracion la paso a int
                    int duracion = Integer.valueOf(elemento.getElementsByTagName("duracion")
                            .item(0).getChildNodes().item(0).getNodeValue());

                    //creo el objeto cancion y lo añado a t
                    c = new Cancion(titulo, ruta, duracion);
                    t.añadirCancion(c);
                }
            }

        } catch (ParserConfigurationException ex) {
            Logger.getLogger(AppListasMusicaGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SAXException ex) {
            Logger.getLogger(AppListasMusicaGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AppListasMusicaGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        return t;

    }
    
    private void jbGuardarListaM3UActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarListaM3UActionPerformed
       
        //guardo la opcion 1 para despues guardad
        opcionGuardado = 1;
        
        jtfNombreArchivoLista.setVisible(true);
        jlIntroduceNombre.setVisible(true);
        jbGuardarListaNombre.setVisible(true);

        
    }//GEN-LAST:event_jbGuardarListaM3UActionPerformed

    private void jbCargarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCargarListaActionPerformed
     
      jdCargarListaCanciones.getContentPane().setBackground(new Color(0,51,204));
      jdCargarListaCanciones.setVisible(true);
      jdCargarListaCanciones.pack();
      
      //el botón guardar permanece ocuto hasta que no haya modificación
      jbGuardarPanelCargar.setVisible(false);
      
      //botenes permanecen ocultos hasta que se abra la lista
        jbAñadirCancion.setVisible(false);
        jbBorrarCancion.setVisible(false);
        jbModificarTabla.setVisible(false);
        
      
      
      
    }//GEN-LAST:event_jbCargarListaActionPerformed

    private void jbAbrirFicheroListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAbrirFicheroListaActionPerformed
       
        jbAñadirCancion.setVisible(true);
        jbBorrarCancion.setVisible(true);
        jbModificarTabla.setVisible(true);
        
         abrirListaCarpeta();
        
    }//GEN-LAST:event_jbAbrirFicheroListaActionPerformed

    private void abrirListaCarpeta() {
        jscpContenedorTablaCargarLista.setVisible(true);
        String ubicacion = rutaListaCanciones();
        //me guardo el nombre con la extensión
        nombreFichero = ubicacion;
        
        
        //dependiendo de la extensión se llama a una función
        if(ubicacion.endsWith("m3u")){
            tabla = cargarListaM3U(ubicacion);
        }else if(ubicacion.endsWith("pls")){
            tabla = cargarListaPLS(ubicacion);
        }else if(ubicacion.endsWith("xml"))
            tabla =cargarListaXSPF(ubicacion);
        
        
        jTable2.setName(ubicacion);
        
        jTable2.setModel(tabla);
        
        //se muestra la tabla
        jscpContenedorTablaCargarLista.setVisible(true);
        
        jTable2.updateUI();
        
        jbAbrirFicheroLista.updateUI();
    }

    private void jbAñadirCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAñadirCancionActionPerformed
       
         
        //hago visible el botón de guardar
        jbGuardarPanelCargar.setVisible(true);
    
        Cancion c = buscarAñadirCancion(); 

        tabla.añadirCancion(c);

        jTable2.setModel(tabla);
        
        jTable2.updateUI();
        
        jbAñadirCancion.updateUI();
        
    }//GEN-LAST:event_jbAñadirCancionActionPerformed

    private void jbBorrarCancionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarCancionActionPerformed
       
         
        //hago visible el botón de guardar
        jbGuardarPanelCargar.setVisible(true);
        
        borrarCancion();
        
         
    }//GEN-LAST:event_jbBorrarCancionActionPerformed

    private void jbModificarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModificarCamposActionPerformed
 
         
        //hago visible el botón de guardar
        jbGuardarPanelCargar.setVisible(true);
        
        int selecFila = jTable2.getSelectedRow();
        int selecColum = jTable2.getSelectedColumn();
        
        if (selecFila >= 0 && selecColum >=0) {

            String valor = jtfTextoNuevoValor.getText();

            if (valor.equals("")) {
                JOptionPane.showMessageDialog(null, "El valor del campo no puede estar en blanco");
            } else {
                tabla.modificarCamposTabla(valor, selecFila, selecColum, tabla);
                jTable2.updateUI();
               
            }

        } else {
            JOptionPane.showMessageDialog(null, "Selecciona un campo de la tabla");
        }
       
         

        
    }//GEN-LAST:event_jbModificarCamposActionPerformed

    private void jtfTextoNuevoValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfTextoNuevoValorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfTextoNuevoValorActionPerformed

    private void jbGuardarPanelCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarPanelCargarActionPerformed
       
     
        //dependiendo de la extensión se llama a una función 
        if(nombreFichero.endsWith("m3u")){
            guardarListaM3U(tabla,nombreFichero);
        }else if(nombreFichero.endsWith("pls")){
            guardarListaPLS(tabla,nombreFichero);
        }else if(nombreFichero.endsWith("xml")){
            guardarListaXSPF(tabla,nombreFichero); 
        }
        
        JOptionPane.showMessageDialog(null, "Lista Guardada!!!!");
    }//GEN-LAST:event_jbGuardarPanelCargarActionPerformed

    private void jbModificarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModificarTablaActionPerformed
        
        //hago visible el botón de guardar
        jbGuardarPanelCargar.setVisible(true);
        
       jlExplicaModificar.setVisible(true);
       jtfTextoNuevoValor.setVisible(true);
       jbModificarTabla.setVisible(true);
       jbModificarCampos.setVisible(true);
       
    }//GEN-LAST:event_jbModificarTablaActionPerformed

    private void jbGuardarListaPLSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarListaPLSActionPerformed
      
        //guardo la opcion 2 para despues guardad
        opcionGuardado = 2;
        
        jtfNombreArchivoLista.setVisible(true);
        jlIntroduceNombre.setVisible(true);
        jbGuardarListaNombre.setVisible(true);
    }//GEN-LAST:event_jbGuardarListaPLSActionPerformed

    private void jbEliminarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarListaActionPerformed
       
         //cambia el color del fondo fel jdialog
        jdEliminarListas.getContentPane().setBackground(new Color(0,51,204));
        
        jdEliminarListas.setVisible(true);
        jdEliminarListas.pack();
    }//GEN-LAST:event_jbEliminarListaActionPerformed

    private void jbBorrarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarListaActionPerformed
       
        String ruta = rutaListaCanciones();
        
        File fichero = new File(ruta);
        if (fichero.delete()){
             JOptionPane.showMessageDialog(null, "Lista ELIMINADA");
        }
           
    }//GEN-LAST:event_jbBorrarListaActionPerformed

    private void jbGuardarListaXSPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarListaXSPFActionPerformed

        //guardo la opcion 1 para despues guardad
        opcionGuardado = 3;
        
        jtfNombreArchivoLista.setVisible(true);
        jlIntroduceNombre.setVisible(true);
        jbGuardarListaNombre.setVisible(true);
    }//GEN-LAST:event_jbGuardarListaXSPFActionPerformed

    private void jmiCargarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCargarListaActionPerformed
      
        jdCargarListaCanciones.getContentPane().setBackground(new Color(0, 51, 204));
        jdCargarListaCanciones.setVisible(true);
        jdCargarListaCanciones.pack();
    }//GEN-LAST:event_jmiCargarListaActionPerformed

    private void jmiCrearListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCrearListaActionPerformed

         jdCrearListaVentana.getContentPane().setBackground(new Color(0, 51, 204));
        
        //abro jDialog Crear Lista
        
        jdCrearListaVentana.setVisible(true);
        jdCrearListaVentana.pack();
        
        //el nombre de la canción no es visible
        jlNombreCancion.setVisible(false);
        
        jspContenedorTablaCrearLista.setVisible(false);
    }//GEN-LAST:event_jmiCrearListaActionPerformed

    private void jmiBorrarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiBorrarListaActionPerformed
        
        jdEliminarListas.setVisible(true);
        jdEliminarListas.pack();
    }//GEN-LAST:event_jmiBorrarListaActionPerformed

    private void jmiAcercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAcercaActionPerformed
        
        String mensaje = "Aplicación *Listas Musicales Java* con Swing\nAutor: Joaquín Melero\nFuncionalidad: Cargar y editar listas"
                +" de canciones en formato M3U, PLS y XSPF";
        String titulo = "Acerca de la aplicación";
        JOptionPane.showMessageDialog(rootPane, mensaje, titulo, JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jmiAcercaActionPerformed

    private void jmiSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jmiSalirActionPerformed

    private void jmiSalirVentanaCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSalirVentanaCargarActionPerformed

        jdCargarListaCanciones.dispose();
    }//GEN-LAST:event_jmiSalirVentanaCargarActionPerformed

    private void jbGuardarListaNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarListaNombreActionPerformed
    
         String nombreArchivo = jtfNombreArchivoLista.getText();

        if (nombreArchivo.equals("")) {
            JOptionPane.showMessageDialog(null, "El valor del campo no puede estar en blanco");
        } else {
            
           switch(opcionGuardado){
               case 1:
                   guardarListaM3U(tabla, nombreArchivo);
               break;
               
               case 2:
                   guardarListaPLS(tabla, nombreArchivo);
               break;
               
               case 3:
                   guardarListaXSPF(tabla, nombreArchivo);
               break;
           }
        
        
        JOptionPane.showMessageDialog(null, "Lista Guardada!!!!");
        
        
        jtfNombreArchivoLista.setVisible(false);
        jlIntroduceNombre.setVisible(false);
        jbGuardarListaNombre.setVisible(false);

        }
    }//GEN-LAST:event_jbGuardarListaNombreActionPerformed

    private void jmiAbrirListaCarpetaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAbrirListaCarpetaActionPerformed
            
          abrirListaCarpeta();
          
          jdCargarListaCanciones.setVisible(true);
          jdCargarListaCanciones.pack();
          
          jdCrearListaVentana.dispose();
    }//GEN-LAST:event_jmiAbrirListaCarpetaActionPerformed

    private void jmiSalirVentanaCrearListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSalirVentanaCrearListaActionPerformed
       
        jdCrearListaVentana.dispose();
    }//GEN-LAST:event_jmiSalirVentanaCrearListaActionPerformed

    private void borrarCancion() {
        int seleccion = jTable2.getSelectedRow();

        if (seleccion >= 0) {
            tabla.elimarCancion(seleccion);

            jTable2.updateUI();

            jbBorrarCancion.updateUI();
            
            JOptionPane.showMessageDialog(null, "Canción Borrada");
            
        }else{
            JOptionPane.showMessageDialog(null, "Selecciona una fila para borrarla");
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppListasMusicaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppListasMusicaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppListasMusicaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppListasMusicaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppListasMusicaGUI().setVisible(true);
            }
        });
    }
    
    
    //atributo para guardar la opciones de guardado valor:1 guarda m3u, 2 guarda pls y 3 guarda xml
    private int opcionGuardado;
  
    //creo el atributo para poder acceder desde fuera. 
    private  MiTablaCanciones tabla = new MiTablaCanciones();
    
    //guardo en el atributo la extensión del fichero para guardar automaticamente
    private String nombreFichero;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton jbAbrirFicheroLista;
    private javax.swing.JButton jbAñadirCancion;
    private javax.swing.JButton jbBorrarCancion;
    private javax.swing.JButton jbBorrarLista;
    private javax.swing.JButton jbBuscarCancion;
    private javax.swing.JButton jbCargarLista;
    private javax.swing.JButton jbCrearLista;
    private javax.swing.JButton jbEliminarLista;
    private javax.swing.JButton jbGuardarListaM3U;
    private javax.swing.JButton jbGuardarListaNombre;
    private javax.swing.JButton jbGuardarListaPLS;
    private javax.swing.JButton jbGuardarListaXSPF;
    private javax.swing.JButton jbGuardarPanelCargar;
    private javax.swing.JButton jbModificarCampos;
    private javax.swing.JButton jbModificarTabla;
    private javax.swing.JDialog jdCargarListaCanciones;
    private javax.swing.JDialog jdCrearListaVentana;
    private javax.swing.JDialog jdEliminarListas;
    private javax.swing.JLabel jlExplicaBorrar;
    private javax.swing.JLabel jlExplicaModificar;
    private javax.swing.JLabel jlIntroduceNombre;
    private javax.swing.JLabel jlLogo;
    private javax.swing.JLabel jlNombreCancion;
    private javax.swing.JMenuItem jmiAbrirListaCarpeta;
    private javax.swing.JMenuItem jmiAcerca;
    private javax.swing.JMenuItem jmiBorrarLista;
    private javax.swing.JMenuItem jmiCargarLista;
    private javax.swing.JMenuItem jmiCrearLista;
    private javax.swing.JMenuItem jmiSalir;
    private javax.swing.JMenuItem jmiSalirVentanaCargar;
    private javax.swing.JMenuItem jmiSalirVentanaCrearLista;
    private javax.swing.JScrollPane jscpContenedorTablaCargarLista;
    private javax.swing.JScrollPane jspContenedorTablaCrearLista;
    private javax.swing.JTextField jtfNombreArchivoLista;
    private javax.swing.JTextField jtfTextoNuevoValor;
    // End of variables declaration//GEN-END:variables
}
